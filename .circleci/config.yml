version: 2.1
orbs:
  aws-cli: circleci/aws-cli@1.4.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here 
            aws cloudformation delete-stack --stack-name prod-backend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name prod-frontend-${CIRCLE_WORKFLOW_ID}
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      # id:
      #   type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration)
            #SUCCESS=1
            if (( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              cd backend
              npm run migrations:revert
              #exit 1
            fi

  empty-bucket:
    description: empty the S3 bucket that contains the frontend
    steps:
      - run:
          name: Empty S3 Bucket
          when: on_fail
          command: |
            aws s3 rm --recursive s3://udapeople-randomgstring/
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v8-frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v8-frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v8-backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: v8-backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [v8-frontend-build]
      # Your job code here
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [v8-backend-build]
      # Your job code here
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [v8-frontend-build]
      # Your job code here
      - run:
          name: Audit front-end
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [v8-backend-build]
      # Your job code here
      - run:
          name: Audit back-end
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=project4-backend \
              --stack-name prod-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
              #exit 1 
      - run:
          name: Gather backend IP Address
          command: |
              IPADDR=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
              --output text)
              curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data "${IPADDR}" \
              https://api.memstash.io/values/deployment

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=project4-frontend \
              --stack-name prod-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:project,Values=project4-backend \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure    
      #- destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    # Environment suggestion here: https://knowledge.udacity.com/questions/484346
    environment:
      TYPEORM_CONNECTION: $TYPEORM_CONNECTION
      TYPEORM_HOST: $TYPEORM_HOST
      TYPEORM_USERNAME: $TYPEORM_USERNAME
      TYPEORM_PASSWORD: $TYPEORM_PASSWORD
      TYPEORM_DATABASE: $TYPEORM_DATABASE
      TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
      TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "f4:71:b5:ea:3e:fd:b1:fa:31:65:35:c8:e1:c9:3a:da"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            pip3 install --upgrade pip \
              && pip3 install awscli
            # apk add curl
            # apk add sudo
            #exit 1
      # - aws-cli/install
      - run:
          name: Configure server
          command: |
            # Your code here
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
            #exit 1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment  

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/install
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            echo "Running migrations..."
            npm run migrations > /tmp/migrations.results
            cat /tmp/migrations.results
            if (grep "has been executed successfully" /tmp/migrations.results)
            then
            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data "1" \
              https://api.memstash.io/values/migration
            fi
            #exit 1
            # Rollback revert migrations - https://knowledge.udacity.com/questions/502810
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       #exit 1
      - revert-migrations
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/deployment)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Build frontend again
          command: |
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs
            npm install
            cd frontend
            npm rum build
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 cp ~/project/frontend/dist/* s3://udapeople-randomgstring/
      # Here's where you will add some code to rollback on failure    
      - destroy-environment 
      - empty-bucket
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           id: $CIRCLE_WORKFLOW_ID

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           id: $CIRCLE_WORKFLOW_ID

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           id: $CIRCLE_WORKFLOW_ID

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]